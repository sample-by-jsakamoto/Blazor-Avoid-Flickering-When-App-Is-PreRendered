@implements IDisposable
@inject HttpClient Http
@inject PersistentComponentState PersistentState

@if (_loremText is not null)
{
    <h1>Lorem ipsum</h1>
    <p>@_loremText</p>
}

@code
{
    private string? _loremText;

    private PersistingComponentStateSubscription _persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        _persistingSubscription = this.PersistentState.RegisterOnPersisting(() => { this.PersistentState.PersistAsJson(nameof(_loremText), _loremText); return Task.CompletedTask; });

        if (!this.PersistentState.TryTakeFromJson<string>(nameof(_loremText), out var restored))
        {
            _loremText = await Http.GetStringAsync("lorem.txt");

            await Task.Delay(1000); // Emulate a long-running operation
        }
        else
        {
            _loremText = restored!;
        }
    }

    public void Dispose()
    {
        _persistingSubscription.Dispose();
    }
}